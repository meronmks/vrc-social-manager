name: 'release-pr'

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    env:
      TAURI_BUNDLER_DMG_IGNORE_CI: false

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=$(echo "$BRANCH_NAME" | sed 's/release\/v//')
          
          # バージョン形式の検証
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-beta\.[0-9]+|-rc\.[0-9]+)?$'; then
            echo "Error: Invalid version format: $VERSION"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT

      - name: Verify version matches tauri.conf.json
        run: |
          EXPECTED_VERSION="${{ steps.extract_version.outputs.version }}"
          ACTUAL_VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          
          if [ "$EXPECTED_VERSION" != "$ACTUAL_VERSION" ]; then
            echo "Error: Version mismatch!"
            echo "Expected: $EXPECTED_VERSION"
            echo "Actual: $ACTUAL_VERSION"
            exit 1
          fi
          
          echo "Version verified: $ACTUAL_VERSION"

      - name: Create tag (first job only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          TAG_NAME="${{ steps.extract_version.outputs.tag_name }}"
          
          # タグを作成（ローカルのみ、pushしない）
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          
          echo "Created tag: $TAG_NAME"

      - name: install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: npm install

      - name: install bundle-licenses
        run: cargo install cargo-bundle-licenses

      - name: Generate release body
        if: matrix.platform == 'ubuntu-22.04'
        id: release_body
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          
          # リリースボディファイルが存在するかチェック
          if [ -f ".release-body-${VERSION}.md" ]; then
            RELEASE_BODY_FILE=".release-body-${VERSION}.md"
          else
            # フォールバック: CHANGELOGから該当バージョンを抽出
            echo "## Changes in v${VERSION}" > ".release-body-${VERSION}.md"
            echo "" >> ".release-body-${VERSION}.md"
            
            # CHANGELOGから該当バージョンのセクションを抽出
            awk "/^## \[${VERSION}\]/, /^## \[/{
              if (/^## \[${VERSION}\]/) next
              if (/^## \[/ && !/^## \[${VERSION}\]/) exit
              if (!/^$/ && !/^\[.*\]:/) print
            }" CHANGELOG.md >> ".release-body-${VERSION}.md"
            
            RELEASE_BODY_FILE=".release-body-${VERSION}.md"
          fi
          
          echo "release_body_file=${RELEASE_BODY_FILE}" >> $GITHUB_OUTPUT

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # tauri updater signing
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ steps.extract_version.outputs.tag_name }}
          releaseName: ${{ steps.extract_version.outputs.tag_name }}
          releaseBody: ${{ matrix.platform == 'ubuntu-22.04' && format('file:{0}', steps.release_body.outputs.release_body_file) || '' }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  cleanup:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Delete release branch
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          git push origin --delete "$BRANCH_NAME"
          echo "Deleted release branch: $BRANCH_NAME"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ github.event.pull_request.head.ref }}'.replace('release/v', '');
            const tagName = `v${version}`;
            
            const comment = `🚀 **リリース処理が完了しました**\n\n` +
                          `- タグ: \`${tagName}\`\n` +
                          `- ドラフトリリースが作成されました\n` +
                          `- [Releases](${context.payload.repository.html_url}/releases) で確認・公開できます\n\n` +
                          `リリースブランチ \`${{ github.event.pull_request.head.ref }}\` は自動削除されました。`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });