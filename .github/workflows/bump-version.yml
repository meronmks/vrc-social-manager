# 使用例:
#
# 1. パッチバージョンを上げる (例: v1.0.0 → v1.0.1)
#    - Version type: patch
#    - Is prerelease: false
#
# 2. マイナーバージョンを上げる (例: v1.0.1 → v1.1.0)
#    - Version type: minor
#    - Is prerelease: false
#
# 3. メジャーバージョンを上げる (例: v1.1.0 → v2.0.0)
#    - Version type: major
#    - Is prerelease: false
#
# 4. ベータバージョンを進める (例: v1.0.0-beta.1 → v1.0.0-beta.2)
#    - Version type: beta
#    - Is prerelease: true
#
# 5. RCバージョンを進める (例: v1.0.0-rc.1 → v1.0.0-rc.2)
#    - Version type: rc
#    - Is prerelease: true
#
# 6. RCから安定版にする (例: v1.0.0-rc.2 → v1.0.0)
#    - Version type: rc
#    - Is prerelease: false
#
# 7. ベータから安定版にする (例: v1.0.0-beta.2 → v1.0.0)
#    - Version type: beta
#    - Is prerelease: false
#    注: ベータ表記を削除し、そのまま安定版として採用します
#
# 8. 安定版から次のベータを開始する (例: v1.0.0 → v1.1.0-beta.1)
#    - Version type: minor
#    - Is prerelease: true
#    注: マイナーバージョンを上げてベータ版として設定します。
#    major を選択すると v2.0.0-beta.1 のように次のメジャーバージョンのベータが作成されます。
#
# 注意:
# - すべてのタグは 'v' から始まり、Semverに準拠しています (例: v1.0.0, v1.0.0-beta.1, v1.0.0-rc.1)
# - バージョンアップ後、自動的にタグが作成され、pushされます
# - 不正なバージョン形式のタグは拒否されます

name: 'bump-version'

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump (major/minor/patch/beta/rc)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - beta
          - rc
      is_prerelease:
        description: 'Is this a pre-release version?'
        required: false
        type: boolean
        default: false

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate tags
        run: |
          # 既存のタグをチェック
          if git tag | grep -v '^v[0-9]\+\.[0-9]\+\.[0-9]\+\(-beta\.[0-9]\+\|-rc\.[0-9]\+\)\?$'; then
            echo "Error: Found tags that don't match the required format (v{major}.{minor}.{patch}, v{major}.{minor}.{patch}-beta.{n}, or v{major}.{minor}.{patch}-rc.{n})"
            exit 1
          fi

  bump-version:
    needs: validate-tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          # ベータバージョンまたはRCバージョンの場合は、ベース部分と番号を分離
          BASE_VERSION=$(echo $CURRENT_VERSION | sed -E 's/-(beta|rc)\.[0-9]+$//')
          PRERELEASE_NUM=$(echo $CURRENT_VERSION | grep -oP '(beta|rc)\.\K[0-9]+$' || echo "0")
          PRERELEASE_TYPE=$(echo $CURRENT_VERSION | grep -oP '-(beta|rc)\.' | sed -E 's/[.-]//g' || echo "")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "prerelease_num=$PRERELEASE_NUM" >> $GITHUB_OUTPUT
          echo "prerelease_type=$PRERELEASE_TYPE" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.base_version }}
          VERSION_TYPE=${{ inputs.version_type }}
          PRERELEASE_NUM=${{ steps.get_version.outputs.prerelease_num }}
          CURRENT_PRERELEASE_TYPE=${{ steps.get_version.outputs.prerelease_type }}
          
          # バージョン番号を分割
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # 指定された型に基づいてバージョンを上げる
          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              if ${{ inputs.is_prerelease }}; then
                NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.1"
              else
                NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              fi
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              if ${{ inputs.is_prerelease }}; then
                NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.1"
              else
                NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              fi
              ;;
            patch)
              PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              ;;
            beta)
              if ${{ inputs.is_prerelease }}; then
                # ベータバージョンの進行
                PRERELEASE_NUM=$((PRERELEASE_NUM + 1))
                NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.$PRERELEASE_NUM"
              else
                # ベータから安定版またはRCへの移行
                if [ "$VERSION_TYPE" = "rc" ]; then
                  NEW_VERSION="$MAJOR.$MINOR.$PATCH-rc.1"
                else
                  NEW_VERSION="$MAJOR.$MINOR.$PATCH"
                fi
              fi
              ;;
            rc)
              if [ "$CURRENT_PRERELEASE_TYPE" = "beta" ] && ${{ inputs.is_prerelease }}; then
                # ベータからRCへの移行
                NEW_VERSION="$MAJOR.$MINOR.$PATCH-rc.1"
              elif ${{ inputs.is_prerelease }}; then
                # RCバージョンの進行
                PRERELEASE_NUM=$((PRERELEASE_NUM + 1))
                NEW_VERSION="$MAJOR.$MINOR.$PATCH-rc.$PRERELEASE_NUM"
              else
                # RCから安定版への移行
                NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              fi
              ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # tauri.conf.jsonのバージョンを更新
          jq --arg version "$NEW_VERSION" '.version = $version' src-tauri/tauri.conf.json > temp.json && mv temp.json src-tauri/tauri.conf.json

      - name: Create commit changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          
          # バージョン形式の検証
          if ! echo "$NEW_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-beta\.[0-9]+|-rc\.[0-9]+)?$'; then
            echo "Error: Invalid version format: $NEW_VERSION"
            exit 1
          fi
          
          # devブランチに切り替え
          git checkout dev
          
          git add src-tauri/tauri.conf.json
          git commit -m "chore: bump version to $NEW_VERSION"
          
          # コミットをプッシュ
          git push origin dev